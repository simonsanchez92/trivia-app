{"version":3,"sources":["components/Navbar.js","components/Footer.js","actions/types.js","reducers/trivia.js","reducers/index.js","store.js","actions/trivia.js","utils/timeFormatter.js","components/Watch.js","components/Game.js","components/Home.js","components/RankingsTable.js","components/Rankings.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","appBar","display","justifyContent","icon","color","flex","fontSize","appBarTitle","typography","h4","textDecoration","border","outline","appBarWrapper","width","margin","alignItems","Navbar","props","classes","AppBar","className","position","Toolbar","to","IconButton","footer","height","backgroundColor","palette","primary","dark","marginTop","inner","flexWrap","innerText","Footer","Container","maxWidth","QUESTIONS_LOADED","SET_CURRENT","RESET_STATE","SET_ANSWERS","CORRECT_ANSWER","UPDATE_BANK","GAME_OVER","GET_USERS","SET_USERNAME","initialState","user","questions","questionNumber","current","currentCorrect","answers","ranking","score","time","triviaReducer","state","action","type","payload","options","correct","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","decodeHTML","text","entities","i","max","length","replace","RegExp","setCurrent","dispatch","a","random","Math","floor","question","updateBank","setOptions","incorrect_answers","correct_answer","sort","map","option","remainingQuestions","filter","currentTime","getUsers","axios","get","res","data","console","log","formatTime","getSeconds","slice","minutes","getMinutes","connect","getTime","useState","timer","setTimer","countRef","useRef","useEffect","setInterval","clearInterval","root","padding","zIndex","timerContainer","questionContainer","form","flexDirection","optionsContainer","formButton","paper","ownProps","submitAnswer","choice","gameOver","body","name","config","headers","post","err","history","useHistory","selected","setSelected","title","setTitle","message","setMessage","React","open","setOpen","handleOpen","id","component","FormControl","size","RadioGroup","aria-label","value","onChange","e","target","handleChange","answer","FormControlLabel","control","Radio","label","Button","onClick","variant","Dialog","onClose","push","style","textAlign","main","hero","borderRadius","heroTitle","heroBtns","playBtnContainer","textField","rankingsLink","resetState","formData","setFormData","textFieldError","setTextFieldError","handleClose","handlePlay","username","results","trim","TextField","error","DialogActions","dialogBox","autoFocus","flexShrink","marginLeft","spacing","useStyles2","tableContainer","boxShadow","background","table","tableFooter","skeleton","paddingTop","skeletonChild","StyledTableCell","withStyles","head","light","common","white","h5","borderBottom","htmlFontSize","fontWeight","fontWeightMedium","TableCell","users","setUsers","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","min","handleGetUsers","ranks","b","elements","Skeleton","animation","buildSkeleton","TableContainer","Paper","Table","TableHead","TableRow","align","TableBody","row","scope","colSpan","TableFooter","TablePagination","rowsPerPageOptions","count","SelectProps","inputProps","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","myOwnProps","RankingsTable","pages","backgroundImage","process","backgroundRepeat","backgroundSize","alignContent","overlay","top","left","bottom","opacity","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.185812f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AppBar, Toolbar, IconButton, createStyles } from \"@material-ui/core\";\r\n\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n      color: \"#fff\",\r\n      flex: \"1\",\r\n      fontSize: \"2rem\",\r\n    },\r\n    appBarTitle: {\r\n      fontSize: theme.typography.h4.fontSize,\r\n      color: \"#fff\",\r\n      textDecoration: \"none\",\r\n      border: \"0\",\r\n      outline: \"0\",\r\n    },\r\n    appBarWrapper: {\r\n      width: \"80%\",\r\n      margin: \"0 auto\",\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n      alignItems: \"center\",\r\n    },\r\n  })\r\n);\r\n\r\nconst Navbar = (props) => {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <AppBar className={classes.appBar} position=\"sticky\">\r\n      <Toolbar className={classes.appBarWrapper}>\r\n        <Link className={classes.appBarTitle} to=\"/\">\r\n          Trivia\r\n        </Link>\r\n        <IconButton>\r\n          <SortIcon className={classes.icon} />\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nimport { AppBar, Container, Toolbar, Typography } from \"@material-ui/core\";\r\n\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    footer: {\r\n      color: \"#eee\",\r\n      height: \"50px\",\r\n      backgroundColor: theme.palette.primary.dark,\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      marginTop: \"100px\",\r\n    },\r\n    inner: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      justifyContent: \"space-between\",\r\n      alignItems: \"center\",\r\n    },\r\n    innerText: {\r\n      fontSize: \"1.1rem\",\r\n    },\r\n  })\r\n);\r\n\r\nconst Footer = (props) => {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <footer className={classes.footer}>\r\n      <Container className={classes.inner} maxWidth=\"lg\">\r\n        <span className={classes.innerText}>© 2021 Trivia</span>\r\n        <span className={classes.innerText}>Developed by Simon Sanchez</span>\r\n      </Container>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export const QUESTIONS_LOADED = \"QUESTIONS_LOADED\";\r\nexport const QUESTIONS_LOADED_FAIL = \"QUESTIONS_LOADED_FAIL\";\r\n\r\nexport const SET_CURRENT = \"SET_CURRENT\";\r\nexport const RESET_STATE = \"RESET_STATE\";\r\n\r\nexport const SET_ANSWERS = \"SET_ANSWERS\";\r\nexport const CORRECT_ANSWER = \"CORRECT_ANSWER\";\r\nexport const INCORRECT_ANSWER = \"INCORRECT_ANSWER\";\r\nexport const UPDATE_BANK = \"UPDATE_BANK\";\r\n\r\nexport const GAME_OVER = \"GAME_OVER\";\r\nexport const GET_USERS = \"GET_USERS\";\r\n\r\nexport const SET_USERNAME = \"SET_USERNAME\";\r\n","import {\r\n  QUESTIONS_LOADED,\r\n  SET_CURRENT,\r\n  UPDATE_BANK,\r\n  SET_ANSWERS,\r\n  CORRECT_ANSWER,\r\n  RESET_STATE,\r\n  GAME_OVER,\r\n  GET_USERS,\r\n  SET_USERNAME,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  user: \"\",\r\n  questions: [],\r\n  questionNumber: 0,\r\n  current: \"\",\r\n  currentCorrect: \"\",\r\n  answers: [],\r\n  ranking: [],\r\n  score: 0,\r\n  time: 0,\r\n};\r\n\r\nfunction triviaReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case QUESTIONS_LOADED:\r\n      return {\r\n        ...state,\r\n        questions: payload,\r\n      };\r\n\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: payload.current,\r\n        answers: [],\r\n      };\r\n\r\n    case SET_ANSWERS:\r\n      return {\r\n        ...state,\r\n        answers: payload.options,\r\n        currentCorrect: payload.correct,\r\n      };\r\n\r\n    case CORRECT_ANSWER:\r\n      return {\r\n        ...state,\r\n        score: state.score + 1,\r\n      };\r\n\r\n    case UPDATE_BANK:\r\n      return {\r\n        ...state,\r\n        questionNumber: state.questionNumber + 1,\r\n        questions: payload,\r\n      };\r\n\r\n    case GAME_OVER:\r\n      return {\r\n        ...state,\r\n        questions: [],\r\n        questionNumber: 0,\r\n        current: \"\",\r\n        currentCorrect: \"\",\r\n        answers: [],\r\n        score: 0,\r\n        time: payload,\r\n      };\r\n    case GET_USERS:\r\n      return {\r\n        ...state,\r\n        ranking: payload,\r\n      };\r\n\r\n    case SET_USERNAME:\r\n      return {\r\n        ...state,\r\n        user: payload,\r\n      };\r\n\r\n    case RESET_STATE:\r\n      return {\r\n        ...state,\r\n        user: \"\",\r\n        questions: [],\r\n        questionNumber: 0,\r\n        current: \"\",\r\n        currentCorrect: \"\",\r\n        answers: [],\r\n        score: 0,\r\n        time: 0,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default triviaReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport triviaReducer from \"../reducers/trivia\";\r\n\r\nexport default combineReducers({\r\n  triviaReducer,\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer,\r\n                         initialState,\r\n                         composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\n\r\nexport default store;\r\n","import axios from \"axios\";\r\nimport store from \"../store\";\r\n\r\nimport {\r\n  QUESTIONS_LOADED,\r\n  QUESTIONS_LOADED_FAIL,\r\n  SET_CURRENT,\r\n  SET_ANSWERS,\r\n  SET_USERNAME,\r\n  CORRECT_ANSWER,\r\n  INCORRECT_ANSWER,\r\n  UPDATE_BANK,\r\n  GAME_OVER,\r\n  GET_USERS,\r\n  RESET_STATE,\r\n} from \"./types\";\r\n\r\nconst URL = \"https://opentdb.com/api.php?amount=20&type=multiple\";\r\n\r\nconst decodeHTML = (text) => {\r\n  const entities = [\r\n    [\"amp\", \"&\"],\r\n    [\"apos\", \"'\"],\r\n    [\"#039\", \"'\"],\r\n    [\"#x27\", \"'\"],\r\n    [\"#x2F\", \"/\"],\r\n    [\"#39\", \"'\"],\r\n    [\"#47\", \"/\"],\r\n    [\"lt\", \"<\"],\r\n    [\"gt\", \">\"],\r\n    [\"nbsp\", \" \"],\r\n    [\"quot\", '\"'],\r\n    [\"pi\", \"π\"],\r\n    [\"aacute\", \"á\"],\r\n    [\"eacute\", \"é\"],\r\n    [\"iacute\", \"í\"],\r\n    [\"oacute\", \"ó\"],\r\n    [\"uacute\", \"ú\"],\r\n  ];\r\n  for (let i = 0, max = entities.length; i < max; ++i)\r\n    text = text.replace(\r\n      new RegExp(\"&\" + entities[i][0] + \";\", \"g\"),\r\n      entities[i][1]\r\n    );\r\n  return text;\r\n};\r\n\r\nexport const getQuestions = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(URL);\r\n    const data = await res.data.results;\r\n\r\n    dispatch({\r\n      type: QUESTIONS_LOADED,\r\n      payload: data,\r\n    });\r\n\r\n    store.dispatch(setCurrent(data));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: QUESTIONS_LOADED_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const setCurrent = (questions) => async (dispatch) => {\r\n  const random = Math.floor(Math.random() * questions.length);\r\n  let current = await questions[random];\r\n  current.question = decodeHTML(current.question);\r\n\r\n  store.dispatch(updateBank(questions, current));\r\n\r\n  store.dispatch(setOptions(current));\r\n\r\n  dispatch({\r\n    type: SET_CURRENT,\r\n    payload: {\r\n      current,\r\n    },\r\n  });\r\n};\r\n\r\nexport const setOptions = (question) => async (dispatch) => {\r\n  let options = await [...question.incorrect_answers, question.correct_answer];\r\n  //Shuffle array of options\r\n  options = options.sort(() => Math.random() - 0.5);\r\n  options = options.map((option) => decodeHTML(option));\r\n\r\n  const correct = question.correct_answer;\r\n\r\n  dispatch({\r\n    type: SET_ANSWERS,\r\n    payload: {\r\n      options,\r\n      correct,\r\n    },\r\n  });\r\n};\r\n\r\nexport const updateBank = (questions, current) => async (dispatch) => {\r\n  const remainingQuestions = questions.filter(\r\n    (question) => question.question !== current.question\r\n  );\r\n\r\n  dispatch({\r\n    type: UPDATE_BANK,\r\n    payload: remainingQuestions,\r\n  });\r\n};\r\n\r\nexport const submitAnswer = (choice, correct) => async (dispatch) => {\r\n  // store.dispatch(setCurrent());\r\n  if (choice === correct) {\r\n    dispatch({\r\n      type: CORRECT_ANSWER,\r\n    });\r\n  } else {\r\n    dispatch({\r\n      type: INCORRECT_ANSWER,\r\n    });\r\n  }\r\n};\r\n\r\nexport const setUser = (username) => async (dispatch) => {\r\n  const user = username.trim();\r\n\r\n  dispatch({\r\n    type: SET_USERNAME,\r\n    payload: user,\r\n  });\r\n};\r\n\r\n//Setting up timer functionality\r\nlet currentTime = 0;\r\n\r\nexport const getTime = (time) => async (dispatch) => {\r\n  currentTime = time;\r\n  return currentTime;\r\n};\r\n\r\nexport const gameOver = (user, score) => async (dispatch) => {\r\n  try {\r\n    const body = { name: user, score, time: currentTime };\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    axios.post(\"https://trivia-app-v1.herokuapp.com/api/users\", body, config);\r\n\r\n    dispatch({\r\n      type: GAME_OVER,\r\n      payload: currentTime,\r\n    });\r\n\r\n    store.dispatch(getUsers());\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getUsers = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\r\n      \"https://trivia-app-v1.herokuapp.com/api/users\"\r\n    );\r\n\r\n    const data = await res.data.data;\r\n\r\n    dispatch({\r\n      type: GET_USERS,\r\n      payload: data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const resetState = () => async (dispatch) => {\r\n  dispatch({\r\n    type: RESET_STATE,\r\n  });\r\n};\r\n","export const formatTime = (time) => {\r\n  const getSeconds = `0${time % 60}`.slice(-2);\r\n  const minutes = `${Math.floor(time / 60)}`;\r\n  const getMinutes = `0${minutes % 60}`.slice(-2);\r\n\r\n  return `${getMinutes} : ${getSeconds}`;\r\n};\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { getTime } from \"../actions/trivia\";\r\n\r\nimport { formatTime } from \"../utils/timeFormatter\";\r\n\r\nconst Watch = ({ getTime }) => {\r\n  const [timer, setTimer] = useState(0);\r\n  const countRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    countRef.current = setInterval(() => {\r\n      getTime(timer);\r\n      setTimer((timer) => timer + 1);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(countRef.current);\r\n  }, [timer]);\r\n\r\n  return (\r\n    <div className=\"stopwatch-card\">\r\n      <p>{formatTime(timer)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nexport default connect(mapStateToProps, { getTime })(Watch);\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrent, submitAnswer, gameOver } from \"../actions/trivia\";\r\n\r\nimport Watch from \"./Watch\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nimport SentimentSatisfiedIcon from \"@material-ui/icons/SentimentSatisfied\";\r\nimport SentimentVerySatisfiedIcon from \"@material-ui/icons/SentimentVerySatisfied\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    margin: \"0 auto\",\r\n    marginTop: \"30px\",\r\n    backgroundColor: \"#2c2c2ccc\",\r\n    width: \"85%\",\r\n    color: \"#eee\",\r\n    padding: \"20px\",\r\n    zIndex: \"2\",\r\n  },\r\n  timerContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  questionContainer: {},\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  optionsContainer: {\r\n    width: \"100%\",\r\n    padding: \"15px 0\",\r\n  },\r\n  formButton: {\r\n    width: \"500px\",\r\n    maxWidth: \"100%\",\r\n  },\r\n  paper: {\r\n    padding: \"20px\",\r\n  },\r\n});\r\n\r\nconst Game = ({\r\n  ownProps,\r\n  gameOver,\r\n  setCurrent,\r\n  submitAnswer,\r\n  questions,\r\n  questionNumber,\r\n  answers,\r\n  current,\r\n  currentCorrect,\r\n  user,\r\n  score,\r\n}) => {\r\n  const classes = useStyles(ownProps);\r\n  const history = useHistory();\r\n\r\n  const [selected, setSelected] = useState(\"\");\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    if (selected !== \"\" && questions.length > 0) {\r\n      submitAnswer(selected, currentCorrect);\r\n      setCurrent(questions);\r\n      setSelected(\"\");\r\n    } else if (questions.length < 1) {\r\n      if (score >= 18) {\r\n        setTitle(`Awesome, ${user}!`);\r\n        setMessage(`you have answered ${score} answers correctly`);\r\n      } else if (score > 10) {\r\n        setTitle(`Very good, ${user}!`);\r\n        setMessage(`You have answered ${score} answers correctly`);\r\n      } else {\r\n        setTitle(`Practice makes perfect, ${user}...`);\r\n        setMessage(`You have answered ${score} answers correctly`);\r\n      }\r\n      gameOver(user, score);\r\n      handleOpen();\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setSelected(e.target.value);\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.timerContainer}>\r\n        <h3>\r\n          Question <span id=\"question-count\">{questionNumber}</span> of 20\r\n        </h3>\r\n        <h3 id=\"timer\">\r\n          <Watch />\r\n        </h3>\r\n      </div>\r\n\r\n      <div className={classes.questionContainer} id=\"question-container\">\r\n        <h2 className=\"question\" id=\"question\">\r\n          {current && current.question}\r\n        </h2>\r\n      </div>\r\n      <form component=\"form\" className={classes.form}>\r\n        <div className={classes.optionsContainer}>\r\n          <FormControl size=\"medium\">\r\n            <RadioGroup\r\n              aria-label=\"gender\"\r\n              name=\"gender1\"\r\n              value={selected}\r\n              onChange={(e) => handleChange(e)}\r\n            >\r\n              {answers &&\r\n                answers.map((answer, i) => (\r\n                  <FormControlLabel\r\n                    key={i}\r\n                    value={answer}\r\n                    control={<Radio />}\r\n                    label={answer}\r\n                  />\r\n                ))}\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </div>\r\n        <Button\r\n          className={classes.formButton}\r\n          onClick={() => handleSubmit()}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Submit\r\n        </Button>\r\n        <div>\r\n          <Dialog\r\n            classes={{\r\n              paper: classes.paper,\r\n            }}\r\n            maxWidth={\"sm\"}\r\n            open={open}\r\n            onClose={handleClose}\r\n            // aria-labelledby=\"alert-dialog-title\"\r\n            // aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <h3 style={{ fontSize: \"2rem\", textAlign: \"Center\" }}>\r\n              {title}{\" \"}\r\n              {score >= 18 ? (\r\n                <SentimentVerySatisfiedIcon />\r\n              ) : (\r\n                <SentimentSatisfiedIcon fontSize={\"large\"} color={\"primary\"} />\r\n              )}\r\n            </h3>\r\n\r\n            <p style={{ fontSize: \"1.3rem\" }} id=\"alert-dialog-description\">\r\n              {message}\r\n            </p>\r\n          </Dialog>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  questions: state.triviaReducer.questions,\r\n  current: state.triviaReducer.current,\r\n  answers: state.triviaReducer.answers,\r\n  currentCorrect: state.triviaReducer.currentCorrect,\r\n  questionNumber: state.triviaReducer.questionNumber,\r\n  ownProps: ownProps,\r\n  user: state.triviaReducer.user,\r\n  score: state.triviaReducer.score,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCurrent, submitAnswer, gameOver })(\r\n  Game\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nimport store from \"../store\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { getQuestions, setUser, resetState } from \"../actions/trivia\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    main: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      padding: \"40px 0 0 0\",\r\n      margin: \"20px 0\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n    },\r\n    hero: {\r\n      backgroundColor: \"#eee\",\r\n      margin: \"0 10px\",\r\n      padding: \"0 15px 15px 15px\",\r\n      border: \"1px solid black\",\r\n      borderRadius: \"4px\",\r\n      zIndex: \"10\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      width: \"500px\",\r\n      maxWidth: \"80%\",\r\n    },\r\n    heroTitle: {\r\n      fontSize: \"2rem\",\r\n      textAlign: \"center\",\r\n    },\r\n    heroBtns: {\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n    },\r\n    playBtnContainer: {\r\n      display: \"flex\",\r\n      margin: \"20px 0\",\r\n    },\r\n    textField: {\r\n      flex: \"1\",\r\n    },\r\n    rankingsLink: {\r\n      textDecoration: \"none\",\r\n      color: \"#eee\",\r\n    },\r\n    paper: {\r\n      padding: \"10px\",\r\n      border: \"2px solid black\",\r\n    },\r\n  })\r\n);\r\n\r\nconst Home = ({ ownProps, resetState }) => {\r\n  const classes = useStyles(ownProps);\r\n  const history = useHistory();\r\n\r\n  const [formData, setFormData] = useState(\"\");\r\n  const [textFieldError, setTextFieldError] = useState(false);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    if (formData !== \"\") {\r\n      setTextFieldError(false);\r\n      setOpen(true);\r\n    } else {\r\n      setTextFieldError(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setTextFieldError(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setTextFieldError(false);\r\n    setFormData(e.target.value);\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    if (formData !== \"\") {\r\n      store.dispatch(getQuestions());\r\n      store.dispatch(setUser(formData));\r\n      history.push(\"/game\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetState();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.main}>\r\n      <div className={classes.hero}>\r\n        <h1 className={classes.heroTitle}>Ready to test your knowledge?</h1>\r\n        <div className={classes.heroBtns}>\r\n          <div className={classes.playBtnContainer}>\r\n            <TextField\r\n              value={formData}\r\n              onChange={(e) => handleChange(e)}\r\n              className={classes.textField}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              error={textFieldError}\r\n              label=\"Your name:\"\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleClickOpen}\r\n            >\r\n              Play\r\n            </Button>\r\n            <div>\r\n              <Dialog\r\n                classes={{\r\n                  paper: classes.paper,\r\n                }}\r\n                maxWidth={\"sm\"}\r\n                open={open}\r\n                onClose={handleClose}\r\n                // aria-labelledby=\"alert-dialog-title\"\r\n                // aria-describedby=\"alert-dialog-description\"\r\n              >\r\n                <h3 style={{ fontSize: \"2rem\", textAlign: \"Center\" }}>\r\n                  Ready to play?\r\n                </h3>\r\n\r\n                <p style={{ fontSize: \"1.2rem\" }} id=\"alert-dialog-description\">\r\n                  Before clicking \"Yes\", focus and prepare to answer 20 multiple\r\n                  choice questions of general knowledge\r\n                </p>\r\n\r\n                <DialogActions className={classes.dialogBox}>\r\n                  <Button onClick={() => handlePlay()} color=\"primary\">\r\n                    Yes\r\n                  </Button>\r\n                  <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                    No\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n          <Button color=\"primary\" variant=\"contained\">\r\n            <Link className={classes.rankingsLink} to=\"/rankings\">\r\n              See Rankings\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({});\r\n\r\nexport default connect(mapStateToProps, { resetState })(Home);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\n\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { formatTime } from \"../utils/timeFormatter\";\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  tableContainer: {\r\n    boxShadow: \"none\",\r\n    background: \"0\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  table: {\r\n    width: \"450px\",\r\n    border: \"1px solid black\",\r\n    backgroundColor: \"#eee\",\r\n    maxWidth: \"100%\",\r\n    display: \"inline-block\",\r\n    margin: \"20px\",\r\n  },\r\n  tableFooter: {\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  skeleton: {\r\n    width: \"450px\",\r\n    margin: \"0 auto\",\r\n    paddingTop: \"40px\",\r\n  },\r\n  skeletonChild: {\r\n    backgroundColor: \"#f0e5e53f\",\r\n  },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.light,\r\n    color: theme.palette.common.white,\r\n    fontSize: theme.typography.h5.fontSize,\r\n    textAlign: \"justify\",\r\n    borderBottom: \"2px solid black\",\r\n  },\r\n  body: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    color: theme.palette.text.primary,\r\n    fontSize: theme.typography.htmlFontSize,\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    border: \"0\",\r\n    textAlign: \"justify\",\r\n    borderBottom: \"1px solid black\",\r\n  },\r\n}))(TableCell);\r\n\r\nconst CustomPaginationActionsTable = ({ ranking }) => {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const classes = useStyles2();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, users.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  //Format data taken from database\r\n  function createData(name, score, time) {\r\n    time = formatTime(time);\r\n    return { name, score, time };\r\n  }\r\n\r\n  //Fetch users from database\r\n  const handleGetUsers = () => {\r\n    const ranks = ranking\r\n      .sort((a, b) => b.score - a.score)\r\n      .map((user) => {\r\n        return createData(user.name, user.score, user.time);\r\n      });\r\n\r\n    setUsers(ranks);\r\n  };\r\n\r\n  const buildSkeleton = () => {\r\n    let elements = [];\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n      elements.push(\r\n        <Skeleton\r\n          key={i}\r\n          className={classes.skeletonChild}\r\n          height={60}\r\n          variant=\"rect\"\r\n          animation=\"wave\"\r\n        />\r\n      );\r\n    }\r\n    console.log(elements);\r\n    return elements;\r\n  };\r\n  useEffect(() => {\r\n    handleGetUsers();\r\n  }, [ranking]);\r\n\r\n  return users.length === 0 ? (\r\n    <div className={classes.skeleton}>{buildSkeleton()}</div>\r\n  ) : (\r\n    <TableContainer className={classes.tableContainer} component={Paper}>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell width={300}>Name</StyledTableCell>\r\n            <StyledTableCell width={150} align=\"right\">\r\n              Score\r\n            </StyledTableCell>\r\n            <StyledTableCell width={150} align=\"right\">\r\n              Time\r\n            </StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {(rowsPerPage > 0\r\n            ? users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : users\r\n          ).map((row) => (\r\n            <TableRow key={row.name}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </StyledTableCell>\r\n              <StyledTableCell>{row.score}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.time}</StyledTableCell>\r\n            </TableRow>\r\n          ))}\r\n\r\n          {emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <TableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n        <TableFooter className={classes.tableFooter}>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[3, 5, 10]}\r\n              colSpan={3}\r\n              count={users.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { \"aria-label\": \"rows per page\" },\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              // ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  ranking: state.triviaReducer.ranking,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CustomPaginationActionsTable);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport RankingsTable from \"./RankingsTable\";\r\n\r\nimport { formatTime } from \"../utils/timeFormatter\";\r\n\r\nimport { getUsers } from \"../actions/trivia\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      zIndex: \"2\",\r\n      height: \"100%\",\r\n    },\r\n  })\r\n);\r\n\r\nconst Rankings = ({ myOwnProps, ranking, getUsers }) => {\r\n  const classes = useStyles(myOwnProps);\r\n\r\n  const [users, setUsers] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   handleGetUsers();\r\n  // }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <RankingsTable />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  myOwnProps: ownProps,\r\n  ranking: state.triviaReducer.ranking,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getUsers })(Rankings);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Navbar from \"./components/Navbar\";\r\nimport Footer from \"./components/Footer\";\r\nimport Game from \"./components/Game\";\r\nimport Home from \"./components/Home\";\r\nimport Rankings from \"./components/Rankings\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { getUsers } from \"./actions/trivia\";\r\n\r\nfunction App(props) {\r\n  const classes = useStyles(props);\r\n\r\n  useEffect(() => {\r\n    store.dispatch(getUsers());\r\n  }, []);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className={classes.root}>\r\n        <Router>\r\n          <Navbar />\r\n\r\n          <main className={classes.pages}>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                {\" \"}\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/game\">\r\n                {\" \"}\r\n                <Game />{\" \"}\r\n              </Route>\r\n              <Route path=\"/rankings\">\r\n                {\" \"}\r\n                <Rankings />{\" \"}\r\n              </Route>\r\n            </Switch>\r\n            <div className={classes.overlay}></div>\r\n            <Footer />\r\n          </main>\r\n        </Router>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n  },\r\n  pages: {\r\n    position: \"relative\",\r\n    backgroundImage: `url(${\r\n      process.env.PUBLIC_URL + \"/assets/background.jpg\"\r\n    })`,\r\n    backgroundColor: \"#232A34\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    flex: \"1\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignContent: \"center\",\r\n    justifyContent: \"space-between\",\r\n    zIndex: \"10\",\r\n  },\r\n  overlay: {\r\n    position: \"absolute\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    bottom: \"0\",\r\n    width: \"100%\",\r\n    backgroundColor: \"black\",\r\n    opacity: \"0.3\",\r\n    zIndex: \"1\",\r\n  },\r\n});\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}